---
title: Getting Started 
subtitle: "[[ANU BDSI<br>workshop]{.tag-label} Introduction to R programming]{.tag-workshop}"
format:
  html: 
    output-file: handout1.html
  anu-light-revealjs:
    width: 1920
    height: 1080
    auto-stretch: false
    html-math-method: katex
    self-contained: false
    css: assets/custom.css
    footer: anu-bdsi.github.io/workshop-intro-R/
author: Emi Tanaka
institute: Biological Data Science Institute
date: 2024/04/03
date-format: "D[rd] MMMM YYYY"
filters:
  - webr
webr: 
  show-startup-message: false   
execute:
  echo: true
---

```{r}
#| include: false
library(tidyverse)
library(plotly)
library(crosstalk)
theme_set(theme_classic(base_size = 24))
```

# Welcome ðŸ‘‹


## Teaching team 

`r photo_path <- ""`

{{< include _team.qmd >}}



::: incremental

- Your turn to introduce yourself!
  - What statistical software, if any, have you used before? 
  - What type of data do you work with or plan to work with?

    
:::

# Workshop materials

::: box

All materials will be hosted at<br> [<https://anu-bdsi.github.io/workshop-intro-R/>]{.f-subheadline target="_blank"}

:::


## Learning objectives

{{< fa hand-point-right >}} The main aim is for you to get started with using R for basic computations.

::: f2

{{< include _learning-objectives.qmd >}}


:::
  
  
## What is R?

::: flex

::: {.w-50}


- **R** is a programming language predominately for data analysis.

<center>
![](images/R_logo.png){width="50%"}
</center>

:::

::: {.w-50 .pl3 .fragment}

- **RStudio Desktop** is an integrated development environment (**IDE**) that helps you to use R.

<center>

![](images/RStudio-Logo-Flat.png){width="100%"}

</center>

::: fragment

- **Visual Studio Code** is another popular IDE (we don't use this).

:::

:::

:::

## Why learn R?

::: {.incremental .f1}

- **R** is one of the top programming languages for statistics or data science.
  - Python is also a good alternative language for data science.
  - _Better to have a mastery of at least one language rather than none_.
- R was initially developed by statisticians for statisticians. 
  - [_State-of-the-art statistical methods are more readily available in R._]{.anu-gold}
- R has a very active and friendly community.
- R is a free and open source software (FOSS) and is a cross-platform language:
  - **free** = money is not a barrier to use it,
  - **open source software** = transparency,
  - **cross-platform** = can be used on Windows, Mac, and Linux.
  
:::


## Rapid development

- Access to Open AI (known for ChatGPT) API is already available in R!

```{r}
#| cache: true
library(openai)
out <- create_image("A data scientist with a laptop and 
                     statistical software in an anime style")
```
```{r}
#| cache: true
#| echo: false
download.file(out$data$url, destfile = "images/openai-creation.png")
```

<center>

![](images/openai-creation.png){.fragment width="50%"}

</center>

## Rich graphical outputs

- R not only has a wide range of statistical methods.
- R also has a wide range of packages for creating beautiful and interactive graphics.
- [<i class='fas fa-mouse-pointer'></i> Try clicking on a bar on the left plot.]{.grey}

::: flex

::: {.w-50}

```{r}
#| echo: false
regdata <- read_csv(here::here("data/2024-04-Registration-Cohort(Form1).csv"), locale=locale(encoding="latin1"),
         col_names = c("affiliation", "workshop", "confidence", "comment", "role"),
         skip = 1) |> 
  mutate(aff2 = fct_lump(affiliation, 3)) |> 
  mutate(n = n(), .by = aff2) |> 
  mutate(aff2 = fct_reorder(aff2, -n)) |> 
  mutate(aff2 = fct_relevel(aff2, "Other", after = Inf))

regdatas <- regdata |> 
  group_by(aff2) |> 
  highlight_key(~aff2)
```

```{r}
#| echo: false
g1 <- regdatas |> 
  ggplot(aes(aff2)) +
  geom_bar(fill = "#226BA7") +
  labs(x = "Affiliation", y = "# of Registrants") +
  scale_y_continuous(expand = expansion(add = c(0, 5)))
ggplotly(g1) |> 
  config(displayModeBar = FALSE) |> 
  style(hoverinfo = 'none')
```






:::

::: {.w-50 .pl3}

```{r}
#| echo: false
g2 <- regdatas |> 
  ggplot(aes(confidence)) +
  #geom_bar(aes(fill = aff2), position = position_dodge(preserve = "single")) +
  geom_bar() + 
  scale_x_continuous(breaks = 1:10) 

g2 <- regdatas |> 
  plot_ly() |> 
  add_histogram(x = ~confidence, histnorm = "percent")

g2 |> 
  layout(barmode = "group", showlegend = FALSE,
         font = list(size = 28),
         xaxis = list(dtick = 1,
                      title = list(text = "Confidence in R skills", font = list(size = 30)), ticksuffix = "   "),
         yaxis = list(title = list(text = "Percentage (%)", font = list(size = 30)), ticksuffix = " ")) |> 
  config(displayModeBar = FALSE) |> 
  style(hoverinfo = 'none')
```


:::



:::


## Dynamic documents

::: flex

::: {.w-50}

- Create beautiful documents with better reproducible practices and workflow!
- This slide and the website is made using a combination of R and Quarto.

:::

::: {.w-50 .pl3}

<iframe src="assets/Report-for-BDSI-Workshops-2024Q1-demo.html" width="100%" height="700px" class="ba"></iframe>

<center class="f2">
scroll down  
<i class='fas fa-long-arrow-alt-down'></i>
</center>

:::

:::



## Interactively working with R

- You can use R like a calculator:


```{webr-r}
1 + 1 
6 / 2 + 0.5
(1 - 4) * 3 - 6^2
```






## How do you use R?

- RStudio Desktop (or RStudio IDE) is the most common way to use R.

<center>

![](images/rstudio-desktop-annotation.png){.ba width="60%"}

</center>

- You can type commands directly into the Console pane.
- Use Source pane to write and save scripts.


# Live demo {background-color="#F5EDDE"}


## Customise Global Options 

::: flex

::: {.w-50}

- Go to **RStudio** > **Tools** > **Global Options...**
- Under the **General** tab, make sure the "Restore .RData into workspace at startup" is _unticked_.
- This avoids unexpectedly loading (old) data into your workspace and making your code only work in your workspace, but not for others (which is bad reproducible practice). 

:::

::: {.w-50 .pl3}

![](images/RStudio-options.png){.ba}


:::

:::





## Arithmetics



```{webr-r}
sqrt(3)
abs(-3)
exp(1)
log(4, base = exp(1))
sum(1:3)
```

## Base R

![](images/base-r.png)

## Finding functions

::: incremental

- There are many functions in R!
- Generally if you need to apply some statistical method, then there is probably already an existing function in the R ecosystem.
- Try always searching it on a search engine (e.g. Google) with the right keywords. 
- If it's computed from a community contributed R package, then check to see if there's some quality indicators:
  - Is it actively maintained?
  - Is it widely used?
  - Does the package have tests for its functions? Etc.

:::

## Help files


- Many of the arithmetic functions come from `base`.
- You can see `library(help = "base")` for indexed help files.

```{webr-r}
library(help = "base")
?log
help(log)
```


## Base packages 

::: incremental

- R has 7 packages (`stats`, `graphics`, `grDevices`, `utils`, `datasets`, `methods`, `base`), collectively referred to as the "base packages", that are loaded automatically when you launch it. 
- The functions in the base packages are generally well-tested and trustworthy.

:::




## Looking at documentation

## Numerical summaries 

- Numerical summaries generally come `base` or `stats` package.
- Some common numerical summaries include:
  - Mean: `mean()`
  - Median: `median()`
  - Five number summary: `fivenum()`
  - Minimum: `min()`
  - Maximum: `max()`
  - Quantile: `quantile()`
  - Correlation coefficient: `cor()`


## Missing values 

::: incremental

- `NA` in R denotes missing values -- there are in fact different types of missing values (`NA_character_`, `NA_integer_`, `NA_real_`, `NA_complex_`).

:::

. . . 

- When there are missing values, it can cause issues in the computation.

```{r}
x <- c(2.3, NA, 4.7)
mean(x)
```

. . . 

- Below we remove the missing values:

```{r}
mean(x, na.rm = TRUE)
```

. . . 

- Notice that the above is different to below when there are missing value(s):

```{r}
sum(x, na.rm = TRUE) / length(x)
```



## Contributed R Packages

::: flex

::: {.w-70}

::: incremental

- **R packages** are community developed extensions to R [(much like **apps** on your mobile)]{.grey}
- The Comprehensive R Archive Network (**CRAN**) is a volunteer maintained repository that hosts submitted R packages that are approved [(much like an **app store**)]{.grey}
- There are close to 20,000 packages available on CRAN but the qualities of R packages vary.
- There are other repositories that host R packages, e.g. **Bioconductor** for bioinformatics, **R Universe**, **R-Forge**, **GitHub** [(we won't cover these)]{.grey}.
:::

:::

::: {.w-30 .pl3 .f4}

![](images/sara-kurfess-6lcT2kRPvnI-unsplash.jpeg)

Photo by <a href="https://unsplash.com/@stereophototyp?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Sara KurfeÃŸ</a> on <a href="https://unsplash.com/photos/turned-on-gold-iphone-6-6lcT2kRPvnI?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
  

:::

:::


## How to get better at R?

[PRACTICE]{.f-headline .fragment}

::: incremental

- Practice with a purpose (e.g. using R on your own data).
- Try teaching and helping others with their R problem. 
- Have a [willingness to _continuously_ learn and adapt]{.f-subheadline}.
  - R is an ever evolving language [(check the [release news](https://cran.r-project.org/doc/manuals/r-release/NEWS.html) every so often)]{.grey},
  - new features and packages are added _very frequently_,
  - whether you are a beginner or not, there are always things we do not know about R.
- Do you have any strategies or tips? 

:::


