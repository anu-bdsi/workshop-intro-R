---
title: Functions, loops and conditional statements
subtitle: "[[ANU BDSI<br>workshop]{.tag-label} Introduction to R programming]{.tag-workshop}"
format:
  anu-light-revealjs:
    width: 1920
    height: 1080
    auto-stretch: false
    html-math-method: katex
    self-contained: true
    css: assets/custom.css
    footer: anu-bdsi.github.io/workshop-intro-to-R/
author: Emi Tanaka
institute: Biological Data Science Institute
date: 2024/04/03
date-format: "D[rd] MMMM YYYY"
filters:
  - webr
webr: 
  show-startup-message: false  
execute:
  echo: true
---

## {{< fa crosshairs >}} Current learning objective

```{r}
#| include: false
library(tidyverse)
source("setup.R")
```

::: f2

```{r}
#| results: asis 
#| echo: false
learning_objectives(9:10)
```

:::

. . . 

<br>

<i class='fas fa-exclamation-circle'></i> The content in this slide will be hard for those new to programming!

. . . 

<center>

_Don't give up!_

</center>

## Functions 

::: incremental

- A function in R has three parts: 
  - `formals()`: the list of input arguments,
  - `body()`: the code inside the function,
  - `environment()`: the environment (out of scope for this workshop).
- Writing your own functions can make repetitive tasks easier.
- You can make a new function using `function()`.

:::

. . . 

```{webr-r}
add <- function(x, y) x + y
add(1, 2)
```


## Examining functions

- Writing the name of the function without arguments shows the internal code:

```{webr-r}
fivenum
```

## Conditional statements

- The condition in the `if` statement needs to evaluate to a **_single_** `TRUE` or `FALSE`
- `ifelse()` is the vectorised version of `if()` and `else` statement.

```{webr-r}
if(mean(cars$speed > 10)) {
  print("The speed is higher than 10!")
} else {
  print("The speed is lower than 10!")
}

ifelse(c(TRUE, FALSE, TRUE), "Hi", "Bye")
```

## Example


```{webr-r}
grade <- function(mark) {
  if(mark >= 80) {
    "HD"
  } else if(mark >= 70) {
    "D"
  } else if(mark >= 60) {
    "CR"
  } else if(mark >= 50) {
    "P"
  } else {
    "N"
  }
}

grade(80)
grade(c(80, 83, 70, 48))
```


## Loops


::: flex

::: {.w-50}

```{webr-r}
grade <- function(mark) {
  if(mark >= 80) {
    "HD"
  } else if(mark >= 70) {
    "D"
  } else if(mark >= 60) {
    "CR"
  } else if(mark >= 50) {
    "P"
  } else {
    "N"
  }
}
```


:::

::: {.w-50 .pl3}

```{webr-r}
marks <- c(80, 83, 70, 48)
# initialise result vector
final_grades <- character(length(marks))

for(i in seq_along(marks)) {
  final_grades[i] <- grade(marks[i])
}

final_grades
```


:::

:::










## Basic troubleshooting 

::: incremental

- Whether you are good at programming or not, you will inevitably encounter errors.
- If you encounter an error,

  1. Read the error message!
  2. Google the error message or ask generative AI (like chatGPT)
  3. Ask for help [_with a reproducible example_]{.fragment}


:::

## Reproducible Example with `reprex` [LIVE DEMO]{.f4}

* Copy your **minimum reproducible example** then run

```{r, eval = FALSE}
reprex::reprex(session_info = TRUE)
```


* Once you run the above command, your clipboard contains the formatted code and output for you to paste into places like [GitHub issues](https://docs.github.com/en/enterprise/2.15/user/articles/creating-an-issue), [Stackoverflow](https://stackoverflow.com/) and forums powered by [Discourse](https://www.discourse.org/), e.g. [RStudio Community](https://community.rstudio.com/).




## Asking for help 

::: flex
::: w-30
* How about the question on the right?
* What makes it *hard* or *easy* for people to answer this question?



:::
::: w-70

<center>
<img class="ba" width = "100%" style="padding:0px" src="images/stackoverflow-2-1.png">
<img class="ba" width = "100%" style="padding:0px" src="images/stackoverflow-2-2.png">

</center>
:::
:::


::: notes

* In this example, the author provides the data but it requires work for others to read this data in.

:::


## Checklist [(note: not an exhaustive checklist)]{.f3}

::: f1

<label class="checkbox-container">Is the problem clearly and succinctly described?
<input type="checkbox"><span class="checkmark"></span>
</label>
<label class="checkbox-container">Is the expected solution or behaviour outlined?
<input type="checkbox"><span class="checkmark"></span>
</label>
<label class="checkbox-container">Are you asking the right people at the right place?
<input type="checkbox"><span class="checkmark"></span>
</label>


If the question is **asked in an public forum** or similar:

<label class="checkbox-container">Can people who can answer your question find your question? E.g. does the post have appropriate tags or keywords to reach the right experts?
<input type="checkbox"><span class="checkmark"></span>
</label>
  
  
If the **problem is computer system related**...

<label class="checkbox-container">Can the problem be easily reproduced on other people's system?
<input type="checkbox"><span class="checkmark"></span>
</label>
<label class="checkbox-container">Is the minimum reproducible code or steps supplied?
<input type="checkbox"><span class="checkmark"></span>
</label>

If the **problem is based on data** ...

<label class="checkbox-container">Is the data supplied?
<input type="checkbox"><span class="checkmark"></span>
</label>
<label class="checkbox-container">If the data is big, could you cull your data further to communicate or reproduce the problem?
<input type="checkbox"><span class="checkmark"></span>
</label>

:::







## Summary


- Write new functions using `function()`.
- Use `if`, `else`, and `ifelse` for conditional statements.
- Use `for` loops for repetitive tasks.
- Troubleshoot errors by reading the error message and asking for help with a _reproducible example_.
- Reproducible examples can be generated using `reprex` package.


# Exercise time {background-color="#F5EDDE"}


[<i class='fas fa-laptop-code'></i>](https://anu-bdsi.github.io/workshop-intro-R/materials.html#tabset-1-4-tab){.f-headline}

`r exercise_countdown(4)`

