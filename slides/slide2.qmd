---
title: Working with objects 
subtitle: "[[ANU BDSI<br>workshop]{.tag-label} Introduction to R programming]{.tag-workshop}"
format:
  anu-light-revealjs:
    width: 1920
    height: 1080
    auto-stretch: false
    html-math-method: katex
    self-contained: true
    css: assets/custom.css
    footer: anu-bdsi.github.io/workshop-intro-to-R/
author: Emi Tanaka
institute: Biological Data Science Institute
date: 2024/04/03
date-format: "D[rd] MMMM YYYY"
filters:
  - webr
webr: 
  show-startup-message: false    
execute:
  echo: true
---


## {{< fa crosshairs >}} Current learning objective

```{r}
#| include: false
source("setup.R")
```

::: f1

```{r}
#| results: asis 
#| echo: false
learning_objectives(4:7)
```

:::

## Using R as a calculator 

```{webr-r}
exp(3 + 4)
exp(3 + 4) + mean(c(1, 3, 5)) 
```

::: incremental

- But we want to save results to reuse later!

:::


## Assignment

::: incremental

- You can assign values to objects using `<-` or `=` or even `->` 
- Just be consistent which one you use!
- The name of the object can be variable so long as it is _syntactically valid_ (no spaces and most special characters, and the name cannot start with a digit)

```{webr-r}
a <- 3 # recommended style
b = 2
4 -> x1 # I don't use this
a
```

:::

## Vectors

- We can combine scalars to form vectors using `c()`:

```{webr-r}
a <- c(1, 2, 3)
a / 2
```

. . . 

- This is a vector of length 3 

```{webr-r}
length(a)
```

. . . 

- This vector is stored as a `double` with the class as `numeric`

```{webr-r}
typeof(a)
class(a)
```

## Vector types

- There are four primary types of atomic vectors: **logical**, **integer**, **double** and **character**.



```{webr-r}
logical_vec <- c(TRUE, FALSE, T, F)
integer_vec <- c(1L, 2L, 3L, 4L)
double_vec <- c(1, 2, 3, 4)
character_vec <- c("A", "B", 'C', 'D') # use either a double or single quote 
integer_vec
```
- The integer and double vectors are collectively called **numeric** vectors.

## Vector

- A vector can only consist of the same type
- If you attempt to combine mismatched types together, it will try to coerce all values to the same type.

```{webr-r}
c(TRUE, F, "3", 10, 'X')
```

## Casting to other types

- E.g., `as.numeric()` tries to coerce input to numeric value.
- If a logical value is coerced to numeric or integer, then
  - `TRUE` is 1 and 
  - `FALSE` is 0.

```{webr-r}
as.numeric(c(TRUE, FALSE))
as.integer(c(1.5, 1))
as.character(1:3)
as.numeric(c("A", "B"))
```

## Factor

- A **factor** in R is a special type of _integer vector_ used typically to encode categorical variables.

```{webr-r}
factor(c("M", "F", "M", "M", "N"))
factor(c("M", "F", "M", "M", "N"), levels = c("M", "F"))
factor(c("M", "F", "M", "M", "N"), levels = c("M", "F"), labels = c("Male", "Female"))
```


## Lists 

- Lists allow to combine elements of different types.
```{webr-r}
l <- list(c(1, 2, 3), 
          c(2.5, 3.0),
          c(TRUE, FALSE),
          c("a", "b"))
```

- You can use `str()` to see the internal structure of an object in R.

```{webr-r}
str(l)
```

## Data frames

- `data.frame` is a special type of a _named_ list where each element of the vector is the same length.

```{webr-r}
df <- data.frame(grade = c("A", "B", "C"),
                     n = c(10, 14, 30))

df
```

```{webr-r}
colnames(df)
nrow(df)
ncol(df)
```

## Subsetting vectors [Part 1]{.f3}

- **Positive integers** select elements at the specified positions:

```{webr-r}
x <- c(1.1, 2.2, 3.3, 4.4, 5.5)
x[c(3, 1)]
x[c(2, 2)]
x[c(2.3, 2.8)] # double is silently truncated to integers
```
. . . 

- **Negative integers** exclude elements at the specified positions:

```{webr-r}
#| error: true
x[-c(3, 1)]
x[c(-3, 1)] # you can't mix positive and negative integers
```

## Subsetting vectors [Part 2]{.f3}

- **Logical vectors** select elements where logical value is `TRUE`.

```{webr-r}
x[c(TRUE, FALSE, TRUE, FALSE, TRUE)]
x[x > 3]
```

- If the logical vector used for subsetting a vector is shorter than it then the logical vector is _recycled_ to match the length of the vector.

```{webr-r}
x[c(TRUE, FALSE)] # the same as the first one
```

## Subsetting named vectors 

- **Character vectors** select elements based on the name of the vector (if any):

```{webr-r}
y <- c("a" = 1.1, "b" = 2.2, "c" = 3.3, "d" = 4.4, "e" = 5.5)
y
y[c("c", "a", "a", "f")]
```

## Subsetting lists

::: flex

::: {.w-50}

```{webr-r}
l <- list(c(1, 2, 3), 
          c(2.5, 3.0),
          c(TRUE, FALSE),
          c("a", "b"))
str(l)
```


:::

::: {.w-50 .pl3}

```{webr-r}
#| error: true
l[1]
l[[1]]
l[c(1, 2)]
l[[c(1, 2)]] # what's happened here?!
```

:::

:::




## Subsetting named lists


```{webr-r}
l2 <- list(A = c(1, 2, 3),
           log = c(TRUE, FALSE),
           who = c("Terry", "Jon"))

l2$A
l2[c("A", "log")]
l2[["A"]]
```


## Subsetting data frames

::: flex

::: {.w-50}

```{webr-r}
df <- data.frame(grade = c("A", "B", "C"),
                     n = c(10, 14, 30))

df
```


:::

::: {.w-50 .pl3}


```{webr-r}
df[1, ]
df[, 1]
df[, 1, drop = FALSE]
df$n
df[["n"]]
```


:::

:::

## Numerical summaries 


```{webr-r}
cars # built-in data

mean(cars$speed) # Mean
median(cars$speed) # Median
sd(cars$speed) # Sample standard deviation
fivenum(cars$speed) # Five number summary
min(cars$speed) # Minimum
max(cars$speed) # Maximum
quantile(cars$speed, 0.25) # first quartile
cor(cars$speed, cars$dist) # Correlation coefficient
```

## Missing values 

::: incremental

- `NA` in R denotes missing values -- there are in fact different types of missing values (`NA_character_`, `NA_integer_`, `NA_real_`, `NA_complex_`).

:::

. . . 

- When there are missing values, it can cause issues in the computation.

```{webr-r}
x <- c(2.3, NA, 4.7)
mean(x)
```

. . . 

- Below we remove the missing values:

```{webr-r}
mean(x, na.rm = TRUE)
```


## Summary

- Four primary types of atomic vectors: **logical**, **integer**, **double** and **character**.
- A vector can only consist of the same type.
- Other objects types: **factor**, **list**, and **data.frame**.
- There were several ways of _subsetting vectors and lists_.
- Calculating some basic _numerical summaries_.
- Missing values represented as `NA` and may need to be handled specially.


# Exercise time {background-color="#F5EDDE"}


[<i class='fas fa-laptop-code'></i>](https://anu-bdsi.github.io/workshop-intro-R/materials.html#tabset-1-2-tab){.f-headline}

`r countdown::countdown(20, font_size = "3em", color_bakcground = "white", color_text = "black")`
